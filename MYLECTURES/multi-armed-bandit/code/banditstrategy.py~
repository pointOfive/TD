import scipy.stats as stats
import numpy as np
import random
# from __future__ import division

class BanditStrategy(object):	
    '''
    Implements a online, learning strategy to solve
    the Multi-Armed Bandit problem.
    
    parameters:
        bandits: a Bandit class with .pull method
		choice_function: accepts a self argument (which gives access to all the variables), and 
						returns and int between 0 and n-1
    methods:
        sample_bandits(n): sample and train on n pulls.

    attributes:
        N: the cumulative number of samples
        choices: the historical choices as a (N,) array
        bb_score: the historical score as a (N,) array
    '''
    
    def __init__(self, bandits, choice_function):
        '''
        INPUT: Bandits, function
        
        Initializes the BanditStrategy given an instance of the Bandits class
        and a choice function.
        '''
        self.bandits = bandits
        n_bandits = len(self.bandits)
        self.wins = np.zeros(n_bandits)
        self.trials = np.zeros(n_bandits)
        self.N = 0
        self.choices = []
        self.score = []
        self.choice_function = choice_function

    def sample_bandits(self, n=1):
        '''
        INPUT: int
        OUTPUT: None

        Simulate n rounds of running the bandit machine.
        '''
        score = np.zeros(n)
        choices = np.zeros(n)

        # seed the random number generators so you get the same results every
        # time.
        np.random.seed(101)
        random.seed(101)
        
        for k in range(n):
            #sample from the bandits's priors, and select the largest sample
            choice = self.choice_function(self)
            
            #sample the chosen bandit
            result = self.bandits.pull(choice)
            
            #update priors and score
            self.wins[choice] += result
            self.trials[choice] += 1
            score[k] = result 
            self.N += 1
            choices[k] = choice
            
        self.score = np.r_[self.score, score]
        self.choices = np.r_[self.choices, choices]

        
def max_mean(self):
    '''
    Pick the bandit with the current best observed proportion of winning.
    Return the index of the winning bandit.
    '''
    # make sure to play each bandit at least once
    if len(self.trials.nonzero()[0]) < len(self.bandits):
        return np.random.randint(0, len(self.bandits))
    return np.argmax(self.wins / (self.trials + 1))
    
def random_choice(self):
    '''
    Pick a bandit uniformly at random.
    Return the index of the winning bandit.
    '''
    return np.random.randint(0, len(self.wins))

def epsilon_greedy(self, epsilon=0.1):
    '''
    Pick a bandit uniformly at random epsilon percent of the time.
    Otherwise pick the bandit with the best observed proportion of winning.
    Return the index of the winning bandit.
    '''
    if stats.uniform.rvs(size=1)[0] < epsilon:
        return random_choice(self)
    else:
        return np.argmax(np.array(self.wins)/(1.+np.array(self.trials)))

def softmax(self, tau=0.001):
    '''
    Pick an bandit according to the Boltzman Distribution.
    Return the index of the winning bandit.
    '''
    prbs = (1+np.array(self.wins))/(3.+self.trials)
    prbs = np.exp(prbs/tau)
    prbs = prbs/np.sum(prbs)
    return np.argmax(np.random.multinomial(1,prbs,size=1))
           
def ucb1(self):
    '''
    Pick the bandit according to the UCB1 strategy.
    Return the index of the winning bandit.
    '''
    return np.argmax(.01+self.wins/(.01+self.trials) + (2*np.log(2+sum(self.trials))/(2+np.array(self.trials)))**.5)

def bayesian_bandit(self):
    '''
    Randomly sample from a beta distribution for each bandit and pick the one
    with the largest value.
    Return the index of the winning bandit.
    '''
    return np.argmax([stats.beta.rvs(a=self.wins[k]+1,b=self.trials[k]-self.wins[k]+1,size=1)[0] for k in range(len(self.wins))])


import matplotlib.pyplot as plt

def regret(probabilities, choices):
    '''
    INPUT: array of floats (0 to 1), array of ints
    OUTPUT: array of floats

    Take an array of the true probabilities for each machine and an
    array of the indices of the machine played at each round.
    Return an array giving the total regret after each round.
    '''
    p_opt = np.max(probabilities)
    return np.cumsum(p_opt - probabilities[choices])



if __name__ == "__main__":

    from bandits import Bandits
    from banditstrategy import BanditStrategy, random_choice,epsilon_greedy

    bandits = Bandits([0.05, 0.03, 0.06])
    #bandits = Bandits([0.1, 0.1, 0.1, 0.1, 0.9])
    #bandits = Bandits([0.1, 0.1, 0.1, 0.1, 0.12])
    #bandits = Bandits([0.1, 0.2, 0.3, 0.4, 0.5])

    strat = BanditStrategy(bandits, random_choice)
    strat.sample_bandits(1000)
    print "Number of trials: %r \nNumber of wins: %r \nConversion rates: %r \nA total of %d wins of %r trials." % (strat.trials, strat.wins, strat.wins / strat.trials, strat.wins.sum(), strat.trials.sum())

    strat = BanditStrategy(bandits, epsilon_greedy)
    strat.sample_bandits(1000)
    print "Number of trials: %r \nNumber of wins: %r \nConversion rates: %r \nA total of %d wins of %r trials." % (strat.trials, strat.wins, strat.wins / strat.trials, strat.wins.sum(), strat.trials.sum())

    strat = BanditStrategy(bandits, softmax)
    strat.sample_bandits(1000)
    print "Number of trials: %r \nNumber of wins: %r \nConversion rates: %r \nA total of %d wins of %r trials." % (strat.trials, strat.wins, strat.wins / strat.trials, strat.wins.sum(), strat.trials.sum())

    strat = BanditStrategy(bandits, ucb1)
    strat.sample_bandits(1000)
    print "Number of trials: %r \nNumber of wins: %r \nConversion rates: %r \nA total of %d wins of %r trials." % (strat.trials, strat.wins, strat.wins / strat.trials, strat.wins.sum(), strat.trials.sum())

    strat = BanditStrategy(bandits, bayesian_bandit)
    strat.sample_bandits(1000)
    print "Number of trials: %r \nNumber of wins: %r \nConversion rates: %r \nA total of %d wins of %r trials." % (strat.trials, strat.wins, strat.wins / strat.trials, strat.wins.sum(), strat.trials.sum())

    strat = BanditStrategy(bandits, max_mean)
    strat.sample_bandits(1000)
    print "Number of trials: %r \nNumber of wins: %r \nConversion rates: %r \nA total of %d wins of %r trials." % (strat.trials, strat.wins, strat.wins / strat.trials, strat.wins.sum(), strat.trials.sum())



    strat = BanditStrategy(bandits, bayesian_bandit)
    strat.sample_bandits(1000)
    r=regret(np.array([0.05, 0.03, 0.06]),[int(i) for i in strat.choices])
    plt.plot(r,label="bb")
    strat = BanditStrategy(bandits, softmax)
    strat.sample_bandits(1000)
    r=regret(np.array([0.05, 0.03, 0.06]),[int(i) for i in strat.choices])
    plt.plot(r,label="softmax")
    strat = BanditStrategy(bandits, max_mean)
    strat.sample_bandits(1000)
    r=regret(np.array([0.05, 0.03, 0.06]),[int(i) for i in strat.choices])
    plt.plot(r,label="max_mean")
    strat = BanditStrategy(bandits, random_choice)
    strat.sample_bandits(1000)
    r=regret(np.array([0.05, 0.03, 0.06]),[int(i) for i in strat.choices])
    plt.plot(r,label="random_choice")
    strat = BanditStrategy(bandits, epsilon_greedy)
    strat.sample_bandits(1000)
    r=regret(np.array([0.05, 0.03, 0.06]),[int(i) for i in strat.choices])
    plt.plot(r,label="epsilon_greedy")
    strat = BanditStrategy(bandits, ucb1)
    strat.sample_bandits(1000)
    r=regret(np.array([0.05, 0.03, 0.06]),[int(i) for i in strat.choices])
    plt.plot(r,label="ucb1")
    plt.legend()
    plt.show()


    fig = plt.figure(2)


    bandits = Bandits([0.05, 0.03, 0.06])
    strat = BanditStrategy(bandits, bayesian_bandit)
    T=10000
    strat.sample_bandits(T)
    print strat.score, strat.choices
    for k in range(3):
        tot_wins = np.cumsum(strat.score[strat.choices==k])
        tot_trys = np.cumsum(np.ones(len(strat.score[strat.choices==k])))
        tot_wins = tot_wins/tot_trys
        tot_wins_all = np.empty(T)
        tot_wins_all[:] = np.NAN
        tot_wins_all[strat.choices==k] = tot_wins
        cur = 0
        for i in range(T):
            if np.isnan(tot_wins_all[i]):
                tot_wins_all[i] = cur
            else:
                cur = tot_wins_all[i]
        x = np.cumsum(np.ones(T))
        plt.plot(x, tot_wins_all,label="bandit "+str(k)+": " + str(bandits.p_values[k]))
    plt.legend()
    plt.show()


